#!/bin/bash

# Clear screen and show banner
clear
echo "
  ____            _     ____               
 | __ )  __ _ ___| |__ |  _ \ __ _ ___ ___ 
 |  _ \ / _\` / __| '_ \| |_) / _\` / __/ __|
 | |_) | (_| \__ \ | | |  __/ (_| \__ \__ \\
 |____/ \__,_|___/_| |_|_|   \__,_|___/___/
"

# Function to validate numbers
validate_number() {
    if ! [[ "$1" =~ ^[0-9]+$ ]] || [ "$1" -le 0 ]; then
        echo "❌ Invalid input: '$1'. Please enter a positive number."
        exit 1
    fi
}

# User Input
echo ""
read -p "🔢 Enter desired password length: " PASS_LENGTH
validate_number "$PASS_LENGTH"

read -p "🔁 Enter number of passwords to generate: " NUM_PASS
validate_number "$NUM_PASS"

# Character Set Includes Specials
CHARSET='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+{}[]=-'

# Initialize password list
PASSWORDS_LIST=""

echo ""
echo "🔐 Generating passwords..."

# Password generation loop
for ((i=1; i<=NUM_PASS; i++)); do
    while true; do
        password=$(tr -dc "$CHARSET" < /dev/urandom | head -c "$PASS_LENGTH")
        
        # Ensure at least one special character exists
        if [[ "$password" =~ [\!\@\#\$\%\^\&\*\(\)\_\+\=\{\}\[\]\-] ]]; then
            break
        fi
    done

    echo -e "✅ Password $i: \033[0;32m$password\033[0m"
    PASSWORDS_LIST+="Password $i: $password"$'\n'
done

# Prompt to save passwords
echo ""
read -p "💾 Do you want to save these passwords to a .txt file? (Y/N): " SAVE_CHOICE

if [[ "$SAVE_CHOICE" =~ ^[Yy]$ ]]; then
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    FILE_NAME="generated_passwords_$TIMESTAMP.txt"
    echo "$PASSWORDS_LIST" > "$FILE_NAME"
    echo "📁 Passwords saved to: ./$FILE_NAME"
else
    echo "❌ Passwords not saved."
fi

